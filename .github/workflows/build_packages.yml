on:
  push:
    branches:
      - 'actions-next'
    tags:
      - 'releases/*'
      - 'prereleases/*'

name: Build All MAGE Server Packages

env:
  MAGE_SHOULD_TEST: ${{ !contains(github.ref, 'next') }}
  MAGE_NODE_VERSIONS: 12 14 16

jobs:
  node_versions:
    runs-on: ubuntu-latest
    steps:
      - id: main
        name: main
        run: |
          node_versions_arr=($(echo ${MAGE_NODE_VERSIONS}))
          node_versions_lines=$(printf '%s\n' ${node_versions_arr[@]} | sort -V)
          printf 'lines:\n %s\n' "${MAGE_NODE_VERSIONS// /'\n'}"
          node_versions_arr=($(echo $node_versions_lines))
          node_versions_json=$(printf '"%s",' ${node_versions_arr}[@])
          node_versions_json="[ ${node_versions_json:0:-1} ]"
          echo node versions arr: ${node_versions_arr}
          echo node versions json: ${node_versions_json}
          echo ::set-output name=all::${node_versions_json}
          echo ::set-output name=latest::${node_versions_arr[-1]}
          echo ::set-output name=pre-latest::${node_versions_arr[@]:0:-1}
  test_node_versions:
    needs: node_versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node: ${{ needs.node_versions.outputs.all }}
    steps:
      - name: show matrix node version
        run: |
          echo node version is ${{ matrix.node }}
  # build_service:
  #   if: ${{ false }}
  #   name: build mage service
  #   needs: node-versions
  #   strategy:
  #     matrix:
  #       os: [ ubuntu-latest ]
  #       node: ${{ needs.node_versions.outputs.all }}
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: install native dev libs
  #       run: |
  #         sudo apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: npm
  #         cache-dependency-path: |
  #           service/package-lock.json
  #           plugins/nga-msi/package-lock.json
  #     - name: build service
  #       run: |
  #         cd service
  #         npm ci
  #         npm run build
  #     - name: test service
  #       if: ${{ fromJSON(env.MAGE_SHOULD_TEST) }}
  #       run: npm run --prefix service ci:test
  #     - name: pack service
  #       run: npm pack ./service
  #     - name: build plugin nga-msi
  #       run: |
  #         cd plugins/nga-msi
  #         npm ci
  #         npm run build
  #     - name: test plugin nga-msi
  #       if: ${{ fromJSON(env.MAGE_SHOULD_TEST) }}
  #       run: npm run --prefix plugins/nga-msi test:run
  #     - name: pack nga-msi
  #       run: npm pack ./plugins/nga-msi
  #     - name: upload packages
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: mage_service_packages-node-${{ matrix.node }}
  #         path: |
  #           ngageoint-mage.*.tgz
  # build_web-app:
  #   name: build mage web app
  #   if: ${{ false }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: npm
  #         cache-dependency-path: web-app/package-lock.json
  #     - name: build web-app
  #       run: |
  #         cd web-app
  #         npm ci
  #         npm run build
  #       env:
  #         NODE_OPTIONS: "--max_old_space_size=4096"
  #     - name: test web-app
  #       if: ${{ fromJSON(env.MAGE_SHOULD_TEST) }}
  #       run: npm run --prefix web-app test-headless
  #     - name: pack web-app
  #       run: npm pack ./web-app/dist/app
  #     - name: upload packages
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: mage_web-app_packages
  #         path: |
  #           ngageoint-mage.*.tgz
  # build_instance:
  #   if: ${{ always() }}
  #   needs: [ build_service, build_web-app ]
  #   strategy:
  #     matrix:
  #       os: [ ubuntu-latest ]
  #       node: [ 12, 14 ]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - name: install json utility
  #       run: npm i json
  #     - name: download service artifacts
  #       if: ${{ false }}
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mage_service_packages-node-${{ matrix.node }}
  #     - name: download web-app artifacts
  #       if: ${{ false }}
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mage_web-app_packages
  #     - name: fake artifacts
  #       if: ${{ true }}
  #       run: |
  #         echo "service" | cat > ngageoint-mage.service-1.2.3-test.1.tgz
  #         echo "web-app" | cat > ngageoint-mage.web-app-4.5.6-test.1.tgz
  #         echo "nga-msi" | cat > ngageoint-mage.nga-msi-7.8.9-test.1.tgz
  #     - name: list artifacts
  #       run: ls -R
  #     - name: create package.json
  #       run: |
  #         (
  #         printf '{ "name": "mage.instance-%s-node-%s", "version": "%s" }\n' ${{ runner.os }} ${{ matrix.node }} ${{ github.ref_name }} &&
  #         printf '{ "scripts": { "start": "mage.service --plugin @ngageoint/mage.nga-msi" }}\n' &&
  #         printf '{ "dependencies": { "@ngageoint/mage.service": "./%s" }}\n' $(ls -1 *mage.service*.tgz) &&
  #         printf '{ "dependencies": { "@ngageoint/mage.web-app": "./%s" }}\n' $(ls -1 *mage.web-app*.tgz) &&
  #         printf '{ "dependencies": { "@ngageoint/nga-msi": "./%s" }}\n' $(ls -1 *mage.nga-msi*.tgz)
  #         ) | npx json --deep-merge > package.json
  #     - name: upload package.json
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: mage_instance_package-${{ runner.os }}-node-${{ matrix.node }}
  #         path: package.json
  #     - id: get_release_name
  #       name: get release name
  #       run: |
  #         echo ::set-output name=result::$(echo ${GITHUB_REF_NAME} | sed -E 's/^(pre)?releases\///i')
  #     - name: release
  #       if: ${{ github.ref_type == 'tag' && contains(github.ref_name, 'releases/') }}
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: ${{ steps.get_release_name.outputs.result }}
  #         prerelease: ${{ startsWith(github.ref_name, 'prereleases/') }}
  #         files: |
  #           package.json
  #           ngageoint*.tgz




