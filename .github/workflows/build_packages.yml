on:
  push:
    branches:
      - 'actions-next'
    tags:
      - 'releases/*'
      - 'prereleases/*'

name: Build All MAGE Server Packages

env:
  MAGE_NODE_VERSIONS: 12 14 16

jobs:

  config:
    runs-on: ubuntu-18.04
    outputs:
      tests_enabled: 'true'
      node_versions-all: ${{ steps.node_versions.outputs.all }}
      node_versions-all-json: ${{ steps.node_versions.outputs.all-json }}
      node_versions-latest: ${{ steps.node_versions.outputs.latest }}
      node_versions-pre_latest: ${{ steps.node_versions.outputs.pre_latest }}
      node_versions-pre_latest-json: ${{ steps.node_versions.outputs.pre_latest-json }}
    steps:
      - id: sort_node_versions
        name: sort versions
        run: |
          echo 'node_versions_lines<<EOF' >> $GITHUB_ENV
          echo ${MAGE_NODE_VERSIONS} | tr ' ' '\n' | sort -V >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - id: node_versions
        name: main
        run: |
          node_versions_arr=($(echo "${node_versions_lines}"))
          node_versions_latest=${node_versions_arr[-1]}
          node_versions_pre_latest=${node_versions_arr[@]:0:${#node_versions_arr[@]}-1}
          node_versions_pre_latest=(${node_versions_arr[@]:0:-1})
          node_versions_json=$(printf '"%s",' ${node_versions_arr[@]})
          node_versions_json="[ ${node_versions_json:0:-1} ]"
          node_versions_pre_latest_json=$(printf '"%s",' ${node_versions_pre_latest[@]})
          node_versions_pre_latest_json="[ ${node_versions_pre_latest_json:0:-1} ]"
          echo "node versions arr: ${node_versions_arr[@]}"
          echo "node versions json: ${node_versions_json}"
          echo "node versions latest: ${node_versions_latest}"
          echo "node versions pre_latest: ${node_versions_pre_latest}"
          echo "node versions pre_latest json: ${node_versions_pre_latest_json}"
          echo ::set-output name=all::${node_versions_arr}
          echo ::set-output name=all-json::${node_versions_json}
          echo ::set-output name=latest::${node_versions_latest}
          echo ::set-output name=pre_latest::${node_versions_pre_latest}
          echo ::set-output name=pre_latest-json::${node_versions_pre_latest_json}

  build_service:
    # if: ${{ false }}
    name: build mage service
    needs: config
    # strategy:
    #   matrix:
    #     node: ${{ fromJSON(needs.node_versions.outputs.all-json) }}
    runs-on: ubuntu-18.04
    steps:
      - name: install native dev libs
        run: |
          sudo apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
      - name: checkout
        uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ needs.config.outputs.node_versions-latest }}
          cache: npm
          cache-dependency-path: |
            service/package-lock.json
            plugins/nga-msi/package-lock.json
      - name: build service
        run: |
          cd service
          npm ci
          npm run build
      # - name: test service
      #   if: ${{ fromJSON(env.MAGE_SHOULD_TEST) }}
      #   run: npm run --prefix service ci:test
      - name: pack service
        run: npm pack ./service
      - name: build plugin nga-msi
        run: |
          cd plugins/nga-msi
          npm ci
          npm run build
      # - name: test plugin nga-msi
      #   if: ${{ fromJSON(env.MAGE_SHOULD_TEST) }}
      #   run: npm run --prefix plugins/nga-msi test:run
      - name: pack nga-msi
        run: npm pack ./plugins/nga-msi
      - name: upload packages
        uses: actions/upload-artifact@v2
        # if: ${{ matrix.node == needs.node_versions.outputs.latest }}
        with:
          name: mage_service_packages
          path: |
            ngageoint-mage.*.tgz

  test_service:
    name: test mage service
    needs: [ config, build_service ]
    if: ${{ needs.config.outputs.tests_enabled }}
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node: ${{ fromJSON(needs.config.outputs.node_versions-all-json) }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          cache-dependency-path: |
            service/package-lock.json
            plugins/nga-msi/package-lock.json
      - name: install service dependencies
        run: |
          npm ci --prefix service
      - name: download service package
        uses: actions/download-artifact@v2
        with:
          name: mage_service_packages
      - name: extract service lib
        run: |
          tar xzf $(ls -1 ngageoint-mage.service-*.tgz) package/lib
          mv package/lib ./service
          rmdir package
      - name: test service with node ${{ matrix.node }}
        run: |
          cd service
          npm run ci:test

  # build_web-app:
  #   name: build mage web app
  #   if: ${{ false }}
  #   needs: node_versions
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: Setup Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ needs.node_versions.outputs.latest }}
  #         cache: npm
  #         cache-dependency-path: web-app/package-lock.json
  #     - name: build web-app
  #       run: |
  #         cd web-app
  #         npm ci
  #         npm run build
  #       env:
  #         NODE_OPTIONS: "--max_old_space_size=4096"
  #     - name: test web-app
  #       if: ${{ fromJSON(env.MAGE_SHOULD_TEST) }}
  #       run: npm run --prefix web-app test-headless
  #     - name: pack web-app
  #       run: npm pack ./web-app/dist/app
  #     - name: upload packages
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: mage_web-app_packages
  #         path: |
  #           ngageoint-mage.*.tgz
  # build_instance:
  #   if: ${{ always() }}
  #   needs: [ node_versions, build_service, build_web-app ]
  #   strategy:
  #     matrix:
  #       node: ${{ fromJSON(needs.node_versions.outputs.all-json) }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: setup node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - name: install json utility
  #       run: npm i json
  #     - name: download service artifacts
  #       if: ${{ false }}
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mage_service_packages
  #     - name: download web-app artifacts
  #       if: ${{ false }}
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: mage_web-app_packages
  #     - name: fake artifacts
  #       if: ${{ true }}
  #       run: |
  #         echo "service" | cat > ngageoint-mage.service-1.2.3-test.1.tgz
  #         echo "web-app" | cat > ngageoint-mage.web-app-4.5.6-test.1.tgz
  #         echo "nga-msi" | cat > ngageoint-mage.nga-msi-7.8.9-test.1.tgz
  #     - name: list artifacts
  #       run: ls -R
  #     - name: create package.json
  #       run: |
  #         (
  #         printf '{ "name": "mage.instance-%s-node-%s", "version": "%s" }\n' ${{ runner.os }} ${{ matrix.node }} ${{ github.ref_name }} &&
  #         printf '{ "scripts": { "start": "mage.service --plugin @ngageoint/mage.nga-msi" }}\n' &&
  #         printf '{ "dependencies": { "@ngageoint/mage.service": "./%s" }}\n' $(ls -1 *mage.service*.tgz) &&
  #         printf '{ "dependencies": { "@ngageoint/mage.web-app": "./%s" }}\n' $(ls -1 *mage.web-app*.tgz) &&
  #         printf '{ "dependencies": { "@ngageoint/nga-msi": "./%s" }}\n' $(ls -1 *mage.nga-msi*.tgz)
  #         ) | npx json --deep-merge > ${{ matrix.node }}/package.json
  #     - name: upload package.json
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: mage_instance_package-${{ runner.os }}-node-${{ matrix.node }}
  #         path: package.json
  #     - id: get_release_name
  #       name: get release name
  #       run: |
  #         echo ::set-output name=result::$(echo ${GITHUB_REF_NAME} | sed -E 's/^(pre)?releases\///i')
  #     - name: release
  #       if: ${{ github.ref_type == 'tag' && contains(github.ref_name, 'releases/') }}
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         name: ${{ steps.get_release_name.outputs.result }}
  #         prerelease: ${{ startsWith(github.ref_name, 'prereleases/') }}
  #         files: |
  #           package.json
  #           ngageoint*.tgz




